(in-package #:coding-math)

(defsketch bezier ((width 800)
                   (height 800)
                   ;; (p0 (make-vec 20 20))
                   ;; (p1 (make-vec 100 500))
                   ;; (p2 (make-vec 300 30))
                   ;; (p3 (make-vec 700 300))
                   (p0 (make-vec (rand-int 0 width)
                                 (rand-int 0 height)))
                   (p1 (make-vec (rand-int 0 width)
                                 (rand-int 0 height)))
                   (p2 (make-vec (rand-int 0 width)
                                 (rand-int 0 height)))
                   (p3 (make-vec (rand-int 0 width)
                                 (rand-int 0 height)))
                   (norm 0))
  (text (format nil "Press <Enter> to restart.") 20 20)
  (if (> norm 100)
      (setf norm 0)
      (incf norm 0.5))
  (dotimes (n (floor norm))
    (let ((x (cubic-bezier (vec-x p0) (vec-x p1) (vec-x p2) (vec-x p3) (/ n 100.0)))
          (y (cubic-bezier (vec-y p0) (vec-y p1) (vec-y p2) (vec-y p3) (/ n 100.0))))
      (circle x y 2)))
  (draw-line p0 p1)
  (draw-line p1 p2)
  (draw-line p2 p3)
  (with-pen (make-pen :fill +blue+)
    (draw-point (lerp-point (/ norm 100.0) p0 p1))
    (draw-point (lerp-point (/ norm 100.0) p1 p2))
    (draw-point (lerp-point (/ norm 100.0) p2 p3)))
  (let* ((p01 (lerp-point (/ norm 100.0) p0 p1))
         (p12 (lerp-point (/ norm 100.0) p1 p2))
         (p23 (lerp-point (/ norm 100.0) p2 p3))
         (p012 (lerp-point (/ norm 100.0) p01 p12))
         (p123 (lerp-point (/ norm 100.0) p12 p23)))
    (with-pen (make-pen :fill +red+)
      (draw-point p01)
      (draw-point p12)
      (draw-point p23))
    (with-pen (make-pen :stroke +blue+)
      (draw-line p01 p12)
      (draw-line p12 p23))
    (with-pen (make-pen :stroke +green+)
      (draw-line p012 p123)))
  (circle (vec-x p0) (vec-y p0) 4)
  (circle (vec-x p1) (vec-y p1) 4)
  (circle (vec-x p2) (vec-y p2) 4)
  (circle (vec-x p3) (vec-y p3) 4)
  )

(defmethod kit.sdl2:keyboard-event ((game bezier) state timestamp repeatp keysym)
  (declare (ignorable timestamp repeatp))
  (with-slots (p0 p1 p2 p3 width height norm) game
    (when (sdl2:scancode= (sdl2:scancode-value keysym) :scancode-return)
      (setf
       norm 0
       p0 (make-vec (rand-int 0 width)
                    (rand-int 0 height))
       p1 (make-vec (rand-int 0 width)
                    (rand-int 0 height))
       p2 (make-vec (rand-int 0 width)
                    (rand-int 0 height))
       p3 (make-vec (rand-int 0 width)
                    (rand-int 0 height))))))
;; (make-instance 'bezier)
